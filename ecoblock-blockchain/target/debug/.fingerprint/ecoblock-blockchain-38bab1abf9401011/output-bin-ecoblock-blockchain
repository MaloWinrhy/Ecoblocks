{"$message_type":"diagnostic","message":"future cannot be sent between threads safely","code":null,"level":"error","spans":[{"file_name":"src/main.rs","byte_start":1131,"byte_end":1139,"line_start":45,"line_end":45,"column_start":14,"column_end":22,"is_primary":true,"text":[{"text":"            .and_then(move |new_block: NewBlockRequest| {","highlight_start":14,"highlight_end":22}],"label":"future created by async block is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"within `{async block@src/main.rs:47:17: 51:18}`, the trait `Send` is not implemented for `std::sync::MutexGuard<'_, Blockchain>`, which is required by `{async block@src/main.rs:47:17: 51:18}: Send`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"future is not `Send` as this value is used across an await","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":1389,"byte_end":1394,"line_start":49,"line_end":49,"column_start":58,"column_end":63,"is_primary":true,"text":[{"text":"                    blockchain.add_block(new_block.data).await;","highlight_start":58,"highlight_end":63}],"label":"await occurs here, with `mut blockchain` maybe used later","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":1389,"byte_end":1394,"line_start":49,"line_end":49,"column_start":58,"column_end":63,"is_primary":false,"text":[{"text":"                    blockchain.add_block(new_block.data).await;","highlight_start":58,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":1287,"byte_end":1301,"line_start":48,"line_end":48,"column_start":25,"column_end":39,"is_primary":false,"text":[{"text":"                    let mut blockchain = blockchain.lock().unwrap();","highlight_start":25,"highlight_end":39}],"label":"has type `std::sync::MutexGuard<'_, Blockchain>` which is not `Send`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `and_then`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.7/src/filter/mod.rs","byte_start":7921,"byte_end":7929,"line_start":255,"line_end":255,"column_start":8,"column_end":16,"is_primary":false,"text":[{"text":"    fn and_then<F>(self, fun: F) -> AndThen<Self, F>","highlight_start":8,"highlight_end":16}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.7/src/filter/mod.rs","byte_start":8069,"byte_end":8073,"line_start":259,"line_end":259,"column_start":32,"column_end":36,"is_primary":true,"text":[{"text":"        F::Output: TryFuture + Send,","highlight_start":32,"highlight_end":36}],"label":"required by this bound in `Filter::and_then`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: future cannot be sent between threads safely\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:45:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .and_then(move |new_block: NewBlockRequest| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mfuture created by async block is not `Send`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `{async block@src/main.rs:47:17: 51:18}`, the trait `Send` is not implemented for `std::sync::MutexGuard<'_, Blockchain>`, which is required by `{async block@src/main.rs:47:17: 51:18}: Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: future is not `Send` as this value is used across an await\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:49:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let mut blockchain = blockchain.lock().unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhas type `std::sync::MutexGuard<'_, Blockchain>` which is not `Send`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    blockchain.add_block(new_block.data).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mawait occurs here, with `mut blockchain` maybe used later\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `and_then`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.7/src/filter/mod.rs:259:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m255\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn and_then<F>(self, fun: F) -> AndThen<Self, F>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        F::Output: TryFuture + Send,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Filter::and_then`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error\u001b[0m\n\n"}
