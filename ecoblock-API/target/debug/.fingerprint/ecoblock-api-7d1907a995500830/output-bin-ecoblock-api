{"$message_type":"diagnostic","message":"failed to resolve: could not find `serde` in `chrono`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":346,"byte_end":373,"line_start":13,"line_end":13,"column_start":20,"column_end":47,"is_primary":true,"text":[{"text":"    #[serde(with = \"chrono::serde::ts_seconds\")]","highlight_start":20,"highlight_end":47}],"label":"could not find `serde` in `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"found an item that was configured out","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-0.4.38/src/lib.rs","byte_start":26768,"byte_end":26773,"line_start":612,"line_end":612,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"pub mod serde {","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the item is gated behind the `serde` feature","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `serde` in `chrono`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:13:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[serde(with = \"chrono::serde::ts_seconds\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `serde` in `chrono`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: found an item that was configured out\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-0.4.38/src/lib.rs:612:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m612\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod serde {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the item is gated behind the `serde` feature\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: could not find `serde` in `chrono`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":438,"byte_end":465,"line_start":15,"line_end":15,"column_start":20,"column_end":47,"is_primary":true,"text":[{"text":"    #[serde(with = \"chrono::serde::ts_seconds\")]","highlight_start":20,"highlight_end":47}],"label":"could not find `serde` in `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"found an item that was configured out","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-0.4.38/src/lib.rs","byte_start":26768,"byte_end":26773,"line_start":612,"line_end":612,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"pub mod serde {","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the item is gated behind the `serde` feature","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: could not find `serde` in `chrono`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:15:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[serde(with = \"chrono::serde::ts_seconds\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `serde` in `chrono`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: found an item that was configured out\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/chrono-0.4.38/src/lib.rs:612:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m612\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod serde {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the item is gated behind the `serde` feature\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `diesel::table`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/schema.rs","byte_start":4,"byte_end":17,"line_start":1,"line_end":1,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"use diesel::table;","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/schema.rs","byte_start":0,"byte_end":19,"line_start":1,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::table;","highlight_start":1,"highlight_end":19},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `diesel::table`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/schema.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse diesel::table;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            Box<T>\u001b[0m\n\u001b[0m            columns::updated_at\u001b[0m\n\u001b[0m            columns::created_at\u001b[0m\n\u001b[0m            columns::password_hash\u001b[0m\n\u001b[0m            columns::email\u001b[0m\n\u001b[0m            columns::username\u001b[0m\n\u001b[0m            columns::id\u001b[0m\n\u001b[0m            columns::star\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            Box<T>\u001b[0m\n\u001b[0m            columns::updated_at\u001b[0m\n\u001b[0m            columns::created_at\u001b[0m\n\u001b[0m            columns::password_hash\u001b[0m\n\u001b[0m            columns::email\u001b[0m\n\u001b[0m            columns::username\u001b[0m\n\u001b[0m            columns::id\u001b[0m\n\u001b[0m            columns::star\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            Box<T>\u001b[0m\n\u001b[0m            columns::updated_at\u001b[0m\n\u001b[0m            columns::created_at\u001b[0m\n\u001b[0m            columns::password_hash\u001b[0m\n\u001b[0m            columns::email\u001b[0m\n\u001b[0m            columns::username\u001b[0m\n\u001b[0m            columns::id\u001b[0m\n\u001b[0m            columns::star\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            Box<T>\u001b[0m\n\u001b[0m            columns::updated_at\u001b[0m\n\u001b[0m            columns::created_at\u001b[0m\n\u001b[0m            columns::password_hash\u001b[0m\n\u001b[0m            columns::email\u001b[0m\n\u001b[0m            columns::username\u001b[0m\n\u001b[0m            columns::id\u001b[0m\n\u001b[0m            columns::star\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `&'insert uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert uuid::Uuid` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `&'insert uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            Box<T>\u001b[0m\n\u001b[0m            columns::updated_at\u001b[0m\n\u001b[0m            columns::created_at\u001b[0m\n\u001b[0m            columns::password_hash\u001b[0m\n\u001b[0m            columns::email\u001b[0m\n\u001b[0m            columns::username\u001b[0m\n\u001b[0m            columns::id\u001b[0m\n\u001b[0m            columns::star\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert uuid::Uuid` to implement `diesel::Expression`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `&'insert NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert NaiveDateTime` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `&'insert NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            Box<T>\u001b[0m\n\u001b[0m            columns::updated_at\u001b[0m\n\u001b[0m            columns::created_at\u001b[0m\n\u001b[0m            columns::password_hash\u001b[0m\n\u001b[0m            columns::email\u001b[0m\n\u001b[0m            columns::username\u001b[0m\n\u001b[0m            columns::id\u001b[0m\n\u001b[0m            columns::star\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert NaiveDateTime` to implement `diesel::Expression`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `&'insert uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert uuid::Uuid` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `&'insert uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            Box<T>\u001b[0m\n\u001b[0m            columns::updated_at\u001b[0m\n\u001b[0m            columns::created_at\u001b[0m\n\u001b[0m            columns::password_hash\u001b[0m\n\u001b[0m            columns::email\u001b[0m\n\u001b[0m            columns::username\u001b[0m\n\u001b[0m            columns::id\u001b[0m\n\u001b[0m            columns::star\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert uuid::Uuid` to implement `diesel::Expression`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `&'insert NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":124,"byte_end":134,"line_start":6,"line_end":6,"column_start":21,"column_end":31,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":21,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Insertable)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":16889,"byte_end":16948,"line_start":417,"line_end":417,"column_start":1,"column_end":60,"is_primary":false,"text":[{"text":"pub fn derive_insertable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":60}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert NaiveDateTime` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:21\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `&'insert NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            Box<T>\u001b[0m\n\u001b[0m            columns::updated_at\u001b[0m\n\u001b[0m            columns::created_at\u001b[0m\n\u001b[0m            columns::password_hash\u001b[0m\n\u001b[0m            columns::email\u001b[0m\n\u001b[0m            columns::username\u001b[0m\n\u001b[0m            columns::id\u001b[0m\n\u001b[0m            columns::star\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert NaiveDateTime` to implement `diesel::Expression`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Insertable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: AppearsOnTable<table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":"the trait `AppearsOnTable<table>` is not implemented for `NaiveDateTime`, which is required by `diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>: diesel::AsChangeset`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":4392,"byte_end":4453,"line_start":118,"line_end":118,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <Box<T> as AppearsOnTable<QS>>\n  <columns::updated_at as AppearsOnTable<QS>>\n  <columns::created_at as AppearsOnTable<QS>>\n  <columns::password_hash as AppearsOnTable<QS>>\n  <columns::email as AppearsOnTable<QS>>\n  <columns::username as AppearsOnTable<QS>>\n  <columns::id as AppearsOnTable<QS>>\n  <columns::star as AppearsOnTable<table>>\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: AppearsOnTable<table>` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:33\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<table>` is not implemented for `NaiveDateTime`, which is required by `diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>: diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m            <Box<T> as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::updated_at as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::created_at as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::password_hash as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::email as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::username as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::id as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::star as AppearsOnTable<table>>\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: AppearsOnTable<table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":"the trait `AppearsOnTable<table>` is not implemented for `NaiveDateTime`, which is required by `diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>: diesel::AsChangeset`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":4392,"byte_end":4453,"line_start":118,"line_end":118,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <Box<T> as AppearsOnTable<QS>>\n  <columns::updated_at as AppearsOnTable<QS>>\n  <columns::created_at as AppearsOnTable<QS>>\n  <columns::password_hash as AppearsOnTable<QS>>\n  <columns::email as AppearsOnTable<QS>>\n  <columns::username as AppearsOnTable<QS>>\n  <columns::id as AppearsOnTable<QS>>\n  <columns::star as AppearsOnTable<table>>\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: AppearsOnTable<table>` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:33\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<table>` is not implemented for `NaiveDateTime`, which is required by `diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>: diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m            <Box<T> as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::updated_at as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::created_at as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::password_hash as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::email as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::username as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::id as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::star as AppearsOnTable<table>>\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: AppearsOnTable<table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":"the trait `AppearsOnTable<table>` is not implemented for `NaiveDateTime`, which is required by `diesel::expression::operators::Eq<columns::created_at, &'update NaiveDateTime>: diesel::AsChangeset`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":4392,"byte_end":4453,"line_start":118,"line_end":118,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <Box<T> as AppearsOnTable<QS>>\n  <columns::updated_at as AppearsOnTable<QS>>\n  <columns::created_at as AppearsOnTable<QS>>\n  <columns::password_hash as AppearsOnTable<QS>>\n  <columns::email as AppearsOnTable<QS>>\n  <columns::username as AppearsOnTable<QS>>\n  <columns::id as AppearsOnTable<QS>>\n  <columns::star as AppearsOnTable<table>>\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'update NaiveDateTime` to implement `AppearsOnTable<table>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<columns::created_at, &'update NaiveDateTime>` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: AppearsOnTable<table>` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:33\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<table>` is not implemented for `NaiveDateTime`, which is required by `diesel::expression::operators::Eq<columns::created_at, &'update NaiveDateTime>: diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m            <Box<T> as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::updated_at as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::created_at as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::password_hash as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::email as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::username as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::id as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::star as AppearsOnTable<table>>\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'update NaiveDateTime` to implement `AppearsOnTable<table>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<columns::created_at, &'update NaiveDateTime>` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: AppearsOnTable<table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":"the trait `AppearsOnTable<table>` is not implemented for `NaiveDateTime`, which is required by `diesel::expression::operators::Eq<columns::created_at, &'update NaiveDateTime>: diesel::AsChangeset`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":4392,"byte_end":4453,"line_start":118,"line_end":118,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <Box<T> as AppearsOnTable<QS>>\n  <columns::updated_at as AppearsOnTable<QS>>\n  <columns::created_at as AppearsOnTable<QS>>\n  <columns::password_hash as AppearsOnTable<QS>>\n  <columns::email as AppearsOnTable<QS>>\n  <columns::username as AppearsOnTable<QS>>\n  <columns::id as AppearsOnTable<QS>>\n  <columns::star as AppearsOnTable<table>>\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'update NaiveDateTime` to implement `AppearsOnTable<table>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<columns::created_at, &'update NaiveDateTime>` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: AppearsOnTable<table>` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:33\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<table>` is not implemented for `NaiveDateTime`, which is required by `diesel::expression::operators::Eq<columns::created_at, &'update NaiveDateTime>: diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m            <Box<T> as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::updated_at as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::created_at as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::password_hash as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::email as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::username as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::id as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::star as AppearsOnTable<table>>\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'update NaiveDateTime` to implement `AppearsOnTable<table>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<columns::created_at, &'update NaiveDateTime>` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":237,"byte_end":239,"line_start":9,"line_end":9,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    pub id: Uuid,","highlight_start":9,"highlight_end":11}],"label":"the trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:9:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub id: Uuid,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            Box<T>\u001b[0m\n\u001b[0m            columns::updated_at\u001b[0m\n\u001b[0m            columns::created_at\u001b[0m\n\u001b[0m            columns::password_hash\u001b[0m\n\u001b[0m            columns::email\u001b[0m\n\u001b[0m            columns::username\u001b[0m\n\u001b[0m            columns::id\u001b[0m\n\u001b[0m            columns::star\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":476,"byte_end":486,"line_start":16,"line_end":16,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"    pub updated_at: chrono::NaiveDateTime,","highlight_start":9,"highlight_end":19}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:16:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub updated_at: chrono::NaiveDateTime,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             Box<T>\u001b[0m\n\u001b[0m             columns::updated_at\u001b[0m\n\u001b[0m             columns::created_at\u001b[0m\n\u001b[0m             columns::password_hash\u001b[0m\n\u001b[0m             columns::email\u001b[0m\n\u001b[0m             columns::username\u001b[0m\n\u001b[0m             columns::id\u001b[0m\n\u001b[0m             columns::star\u001b[0m\n\u001b[0m           and 138 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":237,"byte_end":239,"line_start":9,"line_end":9,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    pub id: Uuid,","highlight_start":9,"highlight_end":11}],"label":"the trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:9:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub id: Uuid,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            Box<T>\u001b[0m\n\u001b[0m            columns::updated_at\u001b[0m\n\u001b[0m            columns::created_at\u001b[0m\n\u001b[0m            columns::password_hash\u001b[0m\n\u001b[0m            columns::email\u001b[0m\n\u001b[0m            columns::username\u001b[0m\n\u001b[0m            columns::id\u001b[0m\n\u001b[0m            columns::star\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":476,"byte_end":486,"line_start":16,"line_end":16,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"    pub updated_at: chrono::NaiveDateTime,","highlight_start":9,"highlight_end":19}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:16:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub updated_at: chrono::NaiveDateTime,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             Box<T>\u001b[0m\n\u001b[0m             columns::updated_at\u001b[0m\n\u001b[0m             columns::created_at\u001b[0m\n\u001b[0m             columns::password_hash\u001b[0m\n\u001b[0m             columns::email\u001b[0m\n\u001b[0m             columns::username\u001b[0m\n\u001b[0m             columns::id\u001b[0m\n\u001b[0m             columns::star\u001b[0m\n\u001b[0m           and 138 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":237,"byte_end":239,"line_start":9,"line_end":9,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    pub id: Uuid,","highlight_start":9,"highlight_end":11}],"label":"the trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `&'insert uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert uuid::Uuid` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:9:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub id: Uuid,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `&'insert uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            Box<T>\u001b[0m\n\u001b[0m            columns::updated_at\u001b[0m\n\u001b[0m            columns::created_at\u001b[0m\n\u001b[0m            columns::password_hash\u001b[0m\n\u001b[0m            columns::email\u001b[0m\n\u001b[0m            columns::username\u001b[0m\n\u001b[0m            columns::id\u001b[0m\n\u001b[0m            columns::star\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert uuid::Uuid` to implement `diesel::Expression`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":476,"byte_end":486,"line_start":16,"line_end":16,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"    pub updated_at: chrono::NaiveDateTime,","highlight_start":9,"highlight_end":19}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `&'insert NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert NaiveDateTime` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:16:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub updated_at: chrono::NaiveDateTime,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `&'insert NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             Box<T>\u001b[0m\n\u001b[0m             columns::updated_at\u001b[0m\n\u001b[0m             columns::created_at\u001b[0m\n\u001b[0m             columns::password_hash\u001b[0m\n\u001b[0m             columns::email\u001b[0m\n\u001b[0m             columns::username\u001b[0m\n\u001b[0m             columns::id\u001b[0m\n\u001b[0m             columns::star\u001b[0m\n\u001b[0m           and 138 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert NaiveDateTime` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":237,"byte_end":239,"line_start":9,"line_end":9,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"    pub id: Uuid,","highlight_start":9,"highlight_end":11}],"label":"the trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `&'insert uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert uuid::Uuid` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:9:9\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub id: Uuid,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `&'insert uuid::Uuid: AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m            Box<T>\u001b[0m\n\u001b[0m            columns::updated_at\u001b[0m\n\u001b[0m            columns::created_at\u001b[0m\n\u001b[0m            columns::password_hash\u001b[0m\n\u001b[0m            columns::email\u001b[0m\n\u001b[0m            columns::username\u001b[0m\n\u001b[0m            columns::id\u001b[0m\n\u001b[0m            columns::star\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert uuid::Uuid` to implement `diesel::Expression`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert uuid::Uuid` to implement `AsExpression<diesel::sql_types::Uuid>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":476,"byte_end":486,"line_start":16,"line_end":16,"column_start":9,"column_end":19,"is_primary":true,"text":[{"text":"    pub updated_at: chrono::NaiveDateTime,","highlight_start":9,"highlight_end":19}],"label":"the trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `&'insert NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert NaiveDateTime` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `&'insert NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:16:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub updated_at: chrono::NaiveDateTime,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `NaiveDateTime`, which is required by `&'insert NaiveDateTime: AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m             Box<T>\u001b[0m\n\u001b[0m             columns::updated_at\u001b[0m\n\u001b[0m             columns::created_at\u001b[0m\n\u001b[0m             columns::password_hash\u001b[0m\n\u001b[0m             columns::email\u001b[0m\n\u001b[0m             columns::username\u001b[0m\n\u001b[0m             columns::id\u001b[0m\n\u001b[0m             columns::star\u001b[0m\n\u001b[0m           and 138 others\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert NaiveDateTime` to implement `diesel::Expression`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'insert NaiveDateTime` to implement `AsExpression<diesel::sql_types::Timestamp>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: AppearsOnTable<table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":"the trait `AppearsOnTable<table>` is not implemented for `NaiveDateTime`, which is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, NaiveDateTime>>): diesel::AsChangeset`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":4392,"byte_end":4453,"line_start":118,"line_end":118,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <Box<T> as AppearsOnTable<QS>>\n  <columns::updated_at as AppearsOnTable<QS>>\n  <columns::created_at as AppearsOnTable<QS>>\n  <columns::password_hash as AppearsOnTable<QS>>\n  <columns::email as AppearsOnTable<QS>>\n  <columns::username as AppearsOnTable<QS>>\n  <columns::id as AppearsOnTable<QS>>\n  <columns::star as AppearsOnTable<table>>\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `(Grouped<Eq<username, Bound<Text, String>>>, Grouped<Eq<email, Bound<Text, String>>>, Grouped<Eq<password_hash, ...>>, ..., ...)` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-16092921950098946029.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: AppearsOnTable<table>` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:33\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<table>` is not implemented for `NaiveDateTime`, which is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, NaiveDateTime>>): diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m            <Box<T> as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::updated_at as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::created_at as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::password_hash as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::email as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::username as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::id as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::star as AppearsOnTable<table>>\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(Grouped<Eq<username, Bound<Text, String>>>, Grouped<Eq<email, Bound<Text, String>>>, Grouped<Eq<password_hash, ...>>, ..., ...)` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-16092921950098946029.txt'\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `NaiveDateTime: AppearsOnTable<table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":"the trait `AppearsOnTable<table>` is not implemented for `NaiveDateTime`, which is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, &'update std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, &'update std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, &'update std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, &'update NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, &'update NaiveDateTime>>): diesel::AsChangeset`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":4392,"byte_end":4453,"line_start":118,"line_end":118,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <Box<T> as AppearsOnTable<QS>>\n  <columns::updated_at as AppearsOnTable<QS>>\n  <columns::created_at as AppearsOnTable<QS>>\n  <columns::password_hash as AppearsOnTable<QS>>\n  <columns::email as AppearsOnTable<QS>>\n  <columns::username as AppearsOnTable<QS>>\n  <columns::id as AppearsOnTable<QS>>\n  <columns::star as AppearsOnTable<table>>\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `&'update NaiveDateTime` to implement `AppearsOnTable<table>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<columns::created_at, &'update NaiveDateTime>` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `(Grouped<Eq<username, Bound<Text, &String>>>, Grouped<Eq<email, Bound<Text, &String>>>, Grouped<Eq<password_hash, ...>>, ..., ...)` to implement `diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-5500333616138475043.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `NaiveDateTime: AppearsOnTable<table>` is not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:33\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<table>` is not implemented for `NaiveDateTime`, which is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, &'update std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, &'update std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, &'update std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, &'update NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, &'update NaiveDateTime>>): diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m            <Box<T> as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::updated_at as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::created_at as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::password_hash as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::email as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::username as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::id as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m            <columns::star as AppearsOnTable<table>>\u001b[0m\n\u001b[0m          and 138 others\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `&'update NaiveDateTime` to implement `AppearsOnTable<table>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<columns::created_at, &'update NaiveDateTime>` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(Grouped<Eq<username, Bound<Text, &String>>>, Grouped<Eq<email, Bound<Text, &String>>>, Grouped<Eq<password_hash, ...>>, ..., ...)` to implement `diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-5500333616138475043.txt'\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `as_changeset` exists for tuple `(Grouped<Eq<username, Bound<Text, String>>>, Grouped<Eq<email, Bound<Text, String>>>, Grouped<Eq<password_hash, ...>>, ..., ...)`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":"method cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":4392,"byte_end":4453,"line_start":118,"line_end":118,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/expression/grouped.rs","byte_start":295,"byte_end":316,"line_start":8,"line_end":8,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"pub struct Grouped<T>(pub T);","highlight_start":1,"highlight_end":22}],"label":"doesn't satisfy `<_ as AsChangeset>::Target = _` or `_: AsChangeset`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the full type name has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-16092921950098946029.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following trait bounds were not satisfied:\n`<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>> as diesel::AsChangeset>::Target = _`\nwhich is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, NaiveDateTime>>): diesel::AsChangeset`\n`<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, NaiveDateTime>> as diesel::AsChangeset>::Target = _`\nwhich is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, NaiveDateTime>>): diesel::AsChangeset`\n`diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>>: diesel::AsChangeset`\nwhich is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, NaiveDateTime>>): diesel::AsChangeset`\n`diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, NaiveDateTime>>: diesel::AsChangeset`\nwhich is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, NaiveDateTime>>): diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `as_changeset` exists for tuple `(Grouped<Eq<username, Bound<Text, String>>>, Grouped<Eq<email, Bound<Text, String>>>, Grouped<Eq<password_hash, ...>>, ..., ...)`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:33\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/expression/grouped.rs:8:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Grouped<T>(pub T);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as AsChangeset>::Target = _` or `_: AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-16092921950098946029.txt'\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m          `<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>> as diesel::AsChangeset>::Target = _`\u001b[0m\n\u001b[0m          which is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, NaiveDateTime>>): diesel::AsChangeset`\u001b[0m\n\u001b[0m          `<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, NaiveDateTime>> as diesel::AsChangeset>::Target = _`\u001b[0m\n\u001b[0m          which is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, NaiveDateTime>>): diesel::AsChangeset`\u001b[0m\n\u001b[0m          `diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>>: diesel::AsChangeset`\u001b[0m\n\u001b[0m          which is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, NaiveDateTime>>): diesel::AsChangeset`\u001b[0m\n\u001b[0m          `diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, NaiveDateTime>>: diesel::AsChangeset`\u001b[0m\n\u001b[0m          which is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, NaiveDateTime>>): diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the method `as_changeset` exists for tuple `(Grouped<Eq<username, Bound<Text, &String>>>, Grouped<Eq<email, Bound<Text, &String>>>, Grouped<Eq<password_hash, ...>>, ..., ...)`, but its trait bounds were not satisfied","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":"method cannot be called due to unsatisfied trait bounds","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":136,"byte_end":147,"line_start":6,"line_end":6,"column_start":33,"column_end":44,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":33,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(AsChangeset)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":4392,"byte_end":4453,"line_start":118,"line_end":118,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"pub fn derive_as_changeset(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/expression/grouped.rs","byte_start":295,"byte_end":316,"line_start":8,"line_end":8,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"pub struct Grouped<T>(pub T);","highlight_start":1,"highlight_end":22}],"label":"doesn't satisfy `<_ as AsChangeset>::Target = _` or `_: AsChangeset`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the full type name has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-10379139864533962786.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following trait bounds were not satisfied:\n`<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, &NaiveDateTime>> as diesel::AsChangeset>::Target = _`\nwhich is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, &NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, &NaiveDateTime>>): diesel::AsChangeset`\n`<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, &NaiveDateTime>> as diesel::AsChangeset>::Target = _`\nwhich is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, &NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, &NaiveDateTime>>): diesel::AsChangeset`\n`diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, &NaiveDateTime>>: diesel::AsChangeset`\nwhich is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, &NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, &NaiveDateTime>>): diesel::AsChangeset`\n`diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, &NaiveDateTime>>: diesel::AsChangeset`\nwhich is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, &NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, &NaiveDateTime>>): diesel::AsChangeset`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: the method `as_changeset` exists for tuple `(Grouped<Eq<username, Bound<Text, &String>>>, Grouped<Eq<email, Bound<Text, &String>>>, Grouped<Eq<password_hash, ...>>, ..., ...)`, but its trait bounds were not satisfied\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:33\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod cannot be called due to unsatisfied trait bounds\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/expression/grouped.rs:8:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Grouped<T>(pub T);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mdoesn't satisfy `<_ as AsChangeset>::Target = _` or `_: AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-10379139864533962786.txt'\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m          `<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, &NaiveDateTime>> as diesel::AsChangeset>::Target = _`\u001b[0m\n\u001b[0m          which is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, &NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, &NaiveDateTime>>): diesel::AsChangeset`\u001b[0m\n\u001b[0m          `<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, &NaiveDateTime>> as diesel::AsChangeset>::Target = _`\u001b[0m\n\u001b[0m          which is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, &NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, &NaiveDateTime>>): diesel::AsChangeset`\u001b[0m\n\u001b[0m          `diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, &NaiveDateTime>>: diesel::AsChangeset`\u001b[0m\n\u001b[0m          which is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, &NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, &NaiveDateTime>>): diesel::AsChangeset`\u001b[0m\n\u001b[0m          `diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, &NaiveDateTime>>: diesel::AsChangeset`\u001b[0m\n\u001b[0m          which is required by `(diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::created_at, &NaiveDateTime>>, diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::updated_at, &NaiveDateTime>>): diesel::AsChangeset`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `AsChangeset` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: handlers::_::_serde::Serialize` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":149,"byte_end":158,"line_start":6,"line_end":6,"column_start":46,"column_end":55,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":46,"highlight_end":55}],"label":"the trait `handlers::_::_serde::Serialize` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":149,"byte_end":158,"line_start":6,"line_end":6,"column_start":46,"column_end":55,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":46,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Serialize)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.203/src/lib.rs","byte_start":2480,"byte_end":2538,"line_start":89,"line_end":89,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"pub fn derive_serialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/models.rs","byte_start":233,"byte_end":236,"line_start":9,"line_end":9,"column_start":5,"column_end":8,"is_primary":false,"text":[{"text":"    pub id: Uuid,","highlight_start":5,"highlight_end":8}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `handlers::_::_serde::Serialize`:\n  bool\n  char\n  isize\n  i8\n  i16\n  i32\n  i64\n  i128\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `handlers::_::_serde::ser::SerializeStruct::serialize_field`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.203/src/ser/mod.rs","byte_start":60770,"byte_end":60785,"line_start":1858,"line_end":1858,"column_start":8,"column_end":23,"is_primary":false,"text":[{"text":"    fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>","highlight_start":8,"highlight_end":23}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.203/src/ser/mod.rs","byte_start":60887,"byte_end":60896,"line_start":1860,"line_end":1860,"column_start":21,"column_end":30,"is_primary":true,"text":[{"text":"        T: ?Sized + Serialize;","highlight_start":21,"highlight_end":30}],"label":"required by this bound in `SerializeStruct::serialize_field`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: handlers::_::_serde::Serialize` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:46\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `handlers::_::_serde::Serialize` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub id: Uuid,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `handlers::_::_serde::Serialize`:\u001b[0m\n\u001b[0m               bool\u001b[0m\n\u001b[0m               char\u001b[0m\n\u001b[0m               isize\u001b[0m\n\u001b[0m               i8\u001b[0m\n\u001b[0m               i16\u001b[0m\n\u001b[0m               i32\u001b[0m\n\u001b[0m               i64\u001b[0m\n\u001b[0m               i128\u001b[0m\n\u001b[0m             and 138 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `handlers::_::_serde::ser::SerializeStruct::serialize_field`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.203/src/ser/mod.rs:1860:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1858\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1859\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1860\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        T: ?Sized + Serialize;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `SerializeStruct::serialize_field`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: handlers::_::_serde::Deserialize<'_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":241,"byte_end":245,"line_start":9,"line_end":9,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    pub id: Uuid,","highlight_start":13,"highlight_end":17}],"label":"the trait `handlers::_::_serde::Deserialize<'_>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `handlers::_::_serde::Deserialize<'de>`:\n  bool\n  char\n  isize\n  i8\n  i16\n  i32\n  i64\n  i128\nand 152 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `next_element`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.203/src/de/mod.rs","byte_start":62226,"byte_end":62238,"line_start":1724,"line_end":1724,"column_start":8,"column_end":20,"is_primary":false,"text":[{"text":"    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>","highlight_start":8,"highlight_end":20}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.203/src/de/mod.rs","byte_start":62308,"byte_end":62324,"line_start":1726,"line_end":1726,"column_start":12,"column_end":28,"is_primary":true,"text":[{"text":"        T: Deserialize<'de>,","highlight_start":12,"highlight_end":28}],"label":"required by this bound in `SeqAccess::next_element`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: handlers::_::_serde::Deserialize<'_>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub id: Uuid,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `handlers::_::_serde::Deserialize<'_>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `handlers::_::_serde::Deserialize<'de>`:\u001b[0m\n\u001b[0m               bool\u001b[0m\n\u001b[0m               char\u001b[0m\n\u001b[0m               isize\u001b[0m\n\u001b[0m               i8\u001b[0m\n\u001b[0m               i16\u001b[0m\n\u001b[0m               i32\u001b[0m\n\u001b[0m               i64\u001b[0m\n\u001b[0m               i128\u001b[0m\n\u001b[0m             and 152 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `next_element`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.203/src/de/mod.rs:1726:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1725\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1726\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        T: Deserialize<'de>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `SeqAccess::next_element`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: handlers::_::_serde::Deserialize<'_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":241,"byte_end":245,"line_start":9,"line_end":9,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"    pub id: Uuid,","highlight_start":13,"highlight_end":17}],"label":"the trait `handlers::_::_serde::Deserialize<'_>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `handlers::_::_serde::Deserialize<'de>`:\n  bool\n  char\n  isize\n  i8\n  i16\n  i32\n  i64\n  i128\nand 152 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `next_value`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.203/src/de/mod.rs","byte_start":66642,"byte_end":66652,"line_start":1863,"line_end":1863,"column_start":8,"column_end":18,"is_primary":false,"text":[{"text":"    fn next_value<V>(&mut self) -> Result<V, Self::Error>","highlight_start":8,"highlight_end":18}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.203/src/de/mod.rs","byte_start":66714,"byte_end":66730,"line_start":1865,"line_end":1865,"column_start":12,"column_end":28,"is_primary":true,"text":[{"text":"        V: Deserialize<'de>,","highlight_start":12,"highlight_end":28}],"label":"required by this bound in `MapAccess::next_value`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: handlers::_::_serde::Deserialize<'_>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:9:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub id: Uuid,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `handlers::_::_serde::Deserialize<'_>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `handlers::_::_serde::Deserialize<'de>`:\u001b[0m\n\u001b[0m               bool\u001b[0m\n\u001b[0m               char\u001b[0m\n\u001b[0m               isize\u001b[0m\n\u001b[0m               i8\u001b[0m\n\u001b[0m               i16\u001b[0m\n\u001b[0m               i32\u001b[0m\n\u001b[0m               i64\u001b[0m\n\u001b[0m               i128\u001b[0m\n\u001b[0m             and 152 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `next_value`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.203/src/de/mod.rs:1865:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1863\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn next_value<V>(&mut self) -> Result<V, Self::Error>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1864\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1865\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        V: Deserialize<'de>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `MapAccess::next_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: handlers::_::_serde::Deserialize<'_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/models.rs","byte_start":160,"byte_end":171,"line_start":6,"line_end":6,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":57,"highlight_end":68}],"label":"the trait `handlers::_::_serde::Deserialize<'_>` is not implemented for `uuid::Uuid`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":160,"byte_end":171,"line_start":6,"line_end":6,"column_start":57,"column_end":68,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Deserialize)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_derive-1.0.203/src/lib.rs","byte_start":2776,"byte_end":2836,"line_start":97,"line_end":97,"column_start":1,"column_end":61,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `handlers::_::_serde::Deserialize<'de>`:\n  bool\n  char\n  isize\n  i8\n  i16\n  i32\n  i64\n  i128\nand 152 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `handlers::_::_serde::__private::de::missing_field`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.203/src/private/de.rs","byte_start":787,"byte_end":800,"line_start":23,"line_end":23,"column_start":8,"column_end":21,"is_primary":false,"text":[{"text":"pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>","highlight_start":8,"highlight_end":21}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.203/src/private/de.rs","byte_start":862,"byte_end":878,"line_start":25,"line_end":25,"column_start":8,"column_end":24,"is_primary":true,"text":[{"text":"    V: Deserialize<'de>,","highlight_start":8,"highlight_end":24}],"label":"required by this bound in `missing_field`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: handlers::_::_serde::Deserialize<'_>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:57\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `handlers::_::_serde::Deserialize<'_>` is not implemented for `uuid::Uuid`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `handlers::_::_serde::Deserialize<'de>`:\u001b[0m\n\u001b[0m             bool\u001b[0m\n\u001b[0m             char\u001b[0m\n\u001b[0m             isize\u001b[0m\n\u001b[0m             i8\u001b[0m\n\u001b[0m             i16\u001b[0m\n\u001b[0m             i32\u001b[0m\n\u001b[0m             i64\u001b[0m\n\u001b[0m             i128\u001b[0m\n\u001b[0m           and 152 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `handlers::_::_serde::__private::de::missing_field`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.203/src/private/de.rs:25:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    V: Deserialize<'de>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `missing_field`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":462,"byte_end":466,"line_start":15,"line_end":15,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        .get_result(conn)","highlight_start":21,"highlight_end":25}],"label":"types differ in mutability","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":451,"byte_end":461,"line_start":15,"line_end":15,"column_start":10,"column_end":20,"is_primary":false,"text":[{"text":"        .get_result(conn)","highlight_start":10,"highlight_end":20}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected mutable reference `&mut _`\n           found reference `&diesel::PgConnection`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":59209,"byte_end":59219,"line_start":1720,"line_end":1720,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>","highlight_start":8,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:15:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .get_result(conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mtypes differ in mutability\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected mutable reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mmut _\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                        found reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mdiesel::PgConnection\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:1720:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime): FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":462,"byte_end":466,"line_start":15,"line_end":15,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        .get_result(conn)","highlight_start":21,"highlight_end":25}],"label":"the trait `FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not implemented for `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime)`, which is required by `InsertStatement<table, query_builder::insert_statement::ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, DefaultableColumnInsertValue<ColumnInsertValue<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, DefaultableColumnInsertValue<ColumnInsertValue<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>), table>>: LoadQuery<'_, _, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":451,"byte_end":461,"line_start":15,"line_end":15,"column_start":10,"column_end":20,"is_primary":false,"text":[{"text":"        .get_result(conn)","highlight_start":10,"highlight_end":20}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `FromStaticSqlRow<ST, DB>`:\n  <(T0,) as FromStaticSqlRow<(ST0,), __DB>>\n  <(T1, T0) as FromStaticSqlRow<(ST1, ST0), __DB>>\n  <(T1, T2, T0) as FromStaticSqlRow<(ST1, ST2, ST0), __DB>>\n  <(T1, T2, T3, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST0), __DB>>\n  <(T1, T2, T3, T4, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST0), __DB>>\n  <(T1, T2, T3, T4, T5, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST0), __DB>>\n  <(T1, T2, T3, T4, T5, T6, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST0), __DB>>\n  <(T1, T2, T3, T4, T5, T6, T7, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST0), __DB>>\nand 24 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `User` to implement `diesel::Queryable<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`","code":null,"level":"note","spans":[{"file_name":"src/models.rs","byte_start":113,"byte_end":122,"line_start":6,"line_end":6,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":10,"highlight_end":19}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":113,"byte_end":122,"line_start":6,"line_end":6,"column_start":10,"column_end":19,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Queryable)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":23512,"byte_end":23570,"line_start":631,"line_end":631,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"pub fn derive_queryable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/models.rs","byte_start":222,"byte_end":226,"line_start":8,"line_end":8,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"pub struct User {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for `User` to implement `FromSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp)` to implement `load_dsl::private::CompatibleType<User, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `InsertStatement<table, ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<username, Bound<Text, &...>>>, ..., ...), ...>>` to implement `LoadQuery<'_, _, User>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `get_result`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":59209,"byte_end":59219,"line_start":1720,"line_end":1720,"column_start":8,"column_end":18,"is_primary":false,"text":[{"text":"    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>","highlight_start":8,"highlight_end":18}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":59296,"byte_end":59322,"line_start":1722,"line_end":1722,"column_start":15,"column_end":41,"is_primary":true,"text":[{"text":"        Self: LoadQuery<'query, Conn, U>,","highlight_start":15,"highlight_end":41}],"label":"required by this bound in `RunQueryDsl::get_result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-4224771517687331995.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime): FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:15:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .get_result(conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not implemented for `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime)`, which is required by `InsertStatement<table, query_builder::insert_statement::ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<columns::username, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, DefaultableColumnInsertValue<ColumnInsertValue<columns::email, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, DefaultableColumnInsertValue<ColumnInsertValue<columns::password_hash, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>), table>>: LoadQuery<'_, _, _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `FromStaticSqlRow<ST, DB>`:\u001b[0m\n\u001b[0m               <(T0,) as FromStaticSqlRow<(ST0,), __DB>>\u001b[0m\n\u001b[0m               <(T1, T0) as FromStaticSqlRow<(ST1, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T0) as FromStaticSqlRow<(ST1, ST2, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T5, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T5, T6, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T5, T6, T7, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST0), __DB>>\u001b[0m\n\u001b[0m             and 24 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `User` to implement `diesel::Queryable<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:10\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[diesel(table_name = users)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct User {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `User` to implement `FromSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp)` to implement `load_dsl::private::CompatibleType<User, _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `InsertStatement<table, ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<username, Bound<Text, &...>>>, ..., ...), ...>>` to implement `LoadQuery<'_, _, User>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `get_result`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:1722:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1721\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: LoadQuery<'query, Conn, U>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RunQueryDsl::get_result`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-4224771517687331995.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Queryable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":574,"byte_end":581,"line_start":19,"line_end":19,"column_start":23,"column_end":30,"is_primary":true,"text":[{"text":"    users::table.find(user_id).get_result(conn)","highlight_start":23,"highlight_end":30}],"label":"the trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `table: FindDsl<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":569,"byte_end":573,"line_start":19,"line_end":19,"column_start":18,"column_end":22,"is_primary":false,"text":[{"text":"    users::table.find(user_id).get_result(conn)","highlight_start":18,"highlight_end":22}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `columns::id` to implement `EqAll<uuid::Uuid>`","code":null,"level":"note","spans":[{"file_name":"src/schema.rs","byte_start":62,"byte_end":64,"line_start":5,"line_end":5,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        id -> Uuid,","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for `table` to implement `FindDsl<uuid::Uuid>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `diesel::QueryDsl::find`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":25546,"byte_end":25550,"line_start":722,"line_end":722,"column_start":8,"column_end":12,"is_primary":false,"text":[{"text":"    fn find<PK>(self, id: PK) -> Find<Self, PK>","highlight_start":8,"highlight_end":12}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":25611,"byte_end":25631,"line_start":724,"line_end":724,"column_start":15,"column_end":35,"is_primary":true,"text":[{"text":"        Self: methods::FindDsl<PK>,","highlight_start":15,"highlight_end":35}],"label":"required by this bound in `QueryDsl::find`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:19:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    users::table.find(user_id).get_result(conn)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `table: FindDsl<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m              Box<T>\u001b[0m\n\u001b[0m              columns::updated_at\u001b[0m\n\u001b[0m              columns::created_at\u001b[0m\n\u001b[0m              columns::password_hash\u001b[0m\n\u001b[0m              columns::email\u001b[0m\n\u001b[0m              columns::username\u001b[0m\n\u001b[0m              columns::id\u001b[0m\n\u001b[0m              columns::star\u001b[0m\n\u001b[0m            and 138 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `diesel::Expression`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `columns::id` to implement `EqAll<uuid::Uuid>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/schema.rs:5:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Uuid,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `table` to implement `FindDsl<uuid::Uuid>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `diesel::QueryDsl::find`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:724:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn find<PK>(self, id: PK) -> Find<Self, PK>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m723\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: methods::FindDsl<PK>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryDsl::find`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: ValidGrouping<()>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":574,"byte_end":581,"line_start":19,"line_end":19,"column_start":23,"column_end":30,"is_primary":true,"text":[{"text":"    users::table.find(user_id).get_result(conn)","highlight_start":23,"highlight_end":30}],"label":"the trait `ValidGrouping<()>` is not implemented for `uuid::Uuid`, which is required by `table: FindDsl<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":569,"byte_end":573,"line_start":19,"line_end":19,"column_start":18,"column_end":22,"is_primary":false,"text":[{"text":"    users::table.find(user_id).get_result(conn)","highlight_start":18,"highlight_end":22}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `ValidGrouping<GroupByClause>`:\n  <Box<T> as ValidGrouping<GB>>\n  <columns::updated_at as ValidGrouping<()>>\n  <columns::updated_at as ValidGrouping<__GB>>\n  <columns::created_at as ValidGrouping<()>>\n  <columns::created_at as ValidGrouping<__GB>>\n  <columns::password_hash as ValidGrouping<()>>\n  <columns::password_hash as ValidGrouping<__GB>>\n  <columns::email as ValidGrouping<()>>\nand 166 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `ValidGrouping<()>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>` to implement `NonAggregate`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `SelectStatement<FromClause<table>>` to implement `FilterDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `table` to implement `FilterDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `table` to implement `FindDsl<uuid::Uuid>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `diesel::QueryDsl::find`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":25546,"byte_end":25550,"line_start":722,"line_end":722,"column_start":8,"column_end":12,"is_primary":false,"text":[{"text":"    fn find<PK>(self, id: PK) -> Find<Self, PK>","highlight_start":8,"highlight_end":12}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":25611,"byte_end":25631,"line_start":724,"line_end":724,"column_start":15,"column_end":35,"is_primary":true,"text":[{"text":"        Self: methods::FindDsl<PK>,","highlight_start":15,"highlight_end":35}],"label":"required by this bound in `QueryDsl::find`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: ValidGrouping<()>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:19:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    users::table.find(user_id).get_result(conn)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `ValidGrouping<()>` is not implemented for `uuid::Uuid`, which is required by `table: FindDsl<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `ValidGrouping<GroupByClause>`:\u001b[0m\n\u001b[0m              <Box<T> as ValidGrouping<GB>>\u001b[0m\n\u001b[0m              <columns::updated_at as ValidGrouping<()>>\u001b[0m\n\u001b[0m              <columns::updated_at as ValidGrouping<__GB>>\u001b[0m\n\u001b[0m              <columns::created_at as ValidGrouping<()>>\u001b[0m\n\u001b[0m              <columns::created_at as ValidGrouping<__GB>>\u001b[0m\n\u001b[0m              <columns::password_hash as ValidGrouping<()>>\u001b[0m\n\u001b[0m              <columns::password_hash as ValidGrouping<__GB>>\u001b[0m\n\u001b[0m              <columns::email as ValidGrouping<()>>\u001b[0m\n\u001b[0m            and 166 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `ValidGrouping<()>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>` to implement `NonAggregate`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `SelectStatement<FromClause<table>>` to implement `FilterDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `table` to implement `FilterDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `table` to implement `FindDsl<uuid::Uuid>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `diesel::QueryDsl::find`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:724:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn find<PK>(self, id: PK) -> Find<Self, PK>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m723\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: methods::FindDsl<PK>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryDsl::find`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: AppearsOnTable<table>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":594,"byte_end":598,"line_start":19,"line_end":19,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"    users::table.find(user_id).get_result(conn)","highlight_start":43,"highlight_end":47}],"label":"the trait `AppearsOnTable<table>` is not implemented for `uuid::Uuid`, which is required by `SelectStatement<FromClause<table>, query_builder::select_clause::DefaultSelectClause<FromClause<table>>, query_builder::distinct_clause::NoDistinctClause, query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>>: LoadQuery<'_, _, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":583,"byte_end":593,"line_start":19,"line_end":19,"column_start":32,"column_end":42,"is_primary":false,"text":[{"text":"    users::table.find(user_id).get_result(conn)","highlight_start":32,"highlight_end":42}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `AppearsOnTable<QS>`:\n  <Box<T> as AppearsOnTable<QS>>\n  <columns::updated_at as AppearsOnTable<QS>>\n  <columns::created_at as AppearsOnTable<QS>>\n  <columns::password_hash as AppearsOnTable<QS>>\n  <columns::email as AppearsOnTable<QS>>\n  <columns::username as AppearsOnTable<QS>>\n  <columns::id as AppearsOnTable<QS>>\n  <columns::star as AppearsOnTable<table>>\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `AppearsOnTable<table>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>` to implement `AppearsOnTable<table>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>` to implement `query_builder::where_clause::ValidWhereClause<FromClause<table>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>` to implement `diesel::query_builder::Query`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>` to implement `LoadQuery<'_, _, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `get_result`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":59209,"byte_end":59219,"line_start":1720,"line_end":1720,"column_start":8,"column_end":18,"is_primary":false,"text":[{"text":"    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>","highlight_start":8,"highlight_end":18}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":59296,"byte_end":59322,"line_start":1722,"line_end":1722,"column_start":15,"column_end":41,"is_primary":true,"text":[{"text":"        Self: LoadQuery<'query, Conn, U>,","highlight_start":15,"highlight_end":41}],"label":"required by this bound in `RunQueryDsl::get_result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-8853325741634496730.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-8853325741634496730.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: AppearsOnTable<table>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:19:43\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    users::table.find(user_id).get_result(conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `AppearsOnTable<table>` is not implemented for `uuid::Uuid`, which is required by `SelectStatement<FromClause<table>, query_builder::select_clause::DefaultSelectClause<FromClause<table>>, query_builder::distinct_clause::NoDistinctClause, query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>>: LoadQuery<'_, _, _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `AppearsOnTable<QS>`:\u001b[0m\n\u001b[0m               <Box<T> as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m               <columns::updated_at as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m               <columns::created_at as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m               <columns::password_hash as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m               <columns::email as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m               <columns::username as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m               <columns::id as AppearsOnTable<QS>>\u001b[0m\n\u001b[0m               <columns::star as AppearsOnTable<table>>\u001b[0m\n\u001b[0m             and 138 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `AppearsOnTable<table>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>` to implement `AppearsOnTable<table>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>` to implement `query_builder::where_clause::ValidWhereClause<FromClause<table>>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>` to implement `diesel::query_builder::Query`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>` to implement `LoadQuery<'_, _, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `get_result`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:1722:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1721\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: LoadQuery<'query, Conn, U>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RunQueryDsl::get_result`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-8853325741634496730.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-8853325741634496730.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: QueryId` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":594,"byte_end":598,"line_start":19,"line_end":19,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"    users::table.find(user_id).get_result(conn)","highlight_start":43,"highlight_end":47}],"label":"the trait `QueryId` is not implemented for `uuid::Uuid`, which is required by `SelectStatement<FromClause<table>, query_builder::select_clause::DefaultSelectClause<FromClause<table>>, query_builder::distinct_clause::NoDistinctClause, query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>>: LoadQuery<'_, _, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":583,"byte_end":593,"line_start":19,"line_end":19,"column_start":32,"column_end":42,"is_primary":false,"text":[{"text":"    users::table.find(user_id).get_result(conn)","highlight_start":32,"highlight_end":42}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `QueryId`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 251 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `QueryId`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"3 redundant requirements hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>` to implement `QueryId`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>` to implement `LoadQuery<'_, _, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `get_result`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":59209,"byte_end":59219,"line_start":1720,"line_end":1720,"column_start":8,"column_end":18,"is_primary":false,"text":[{"text":"    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>","highlight_start":8,"highlight_end":18}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":59296,"byte_end":59322,"line_start":1722,"line_end":1722,"column_start":15,"column_end":41,"is_primary":true,"text":[{"text":"        Self: LoadQuery<'query, Conn, U>,","highlight_start":15,"highlight_end":41}],"label":"required by this bound in `RunQueryDsl::get_result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-8853325741634496730.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-8853325741634496730.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: QueryId` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:19:43\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    users::table.find(user_id).get_result(conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `QueryId` is not implemented for `uuid::Uuid`, which is required by `SelectStatement<FromClause<table>, query_builder::select_clause::DefaultSelectClause<FromClause<table>>, query_builder::distinct_clause::NoDistinctClause, query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>>: LoadQuery<'_, _, _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `QueryId`:\u001b[0m\n\u001b[0m               Box<T>\u001b[0m\n\u001b[0m               columns::updated_at\u001b[0m\n\u001b[0m               columns::created_at\u001b[0m\n\u001b[0m               columns::password_hash\u001b[0m\n\u001b[0m               columns::email\u001b[0m\n\u001b[0m               columns::username\u001b[0m\n\u001b[0m               columns::id\u001b[0m\n\u001b[0m               columns::star\u001b[0m\n\u001b[0m             and 251 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `QueryId`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 3 redundant requirements hidden\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>` to implement `QueryId`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>` to implement `LoadQuery<'_, _, _>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `get_result`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:1722:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1721\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: LoadQuery<'query, Conn, U>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RunQueryDsl::get_result`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-8853325741634496730.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-8853325741634496730.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":594,"byte_end":598,"line_start":19,"line_end":19,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"    users::table.find(user_id).get_result(conn)","highlight_start":43,"highlight_end":47}],"label":"types differ in mutability","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":583,"byte_end":593,"line_start":19,"line_end":19,"column_start":32,"column_end":42,"is_primary":false,"text":[{"text":"    users::table.find(user_id).get_result(conn)","highlight_start":32,"highlight_end":42}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected mutable reference `&mut _`\n           found reference `&diesel::PgConnection`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":59209,"byte_end":59219,"line_start":1720,"line_end":1720,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>","highlight_start":8,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:19:43\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    users::table.find(user_id).get_result(conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mtypes differ in mutability\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected mutable reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mmut _\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                        found reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mdiesel::PgConnection\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:1720:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime): FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":594,"byte_end":598,"line_start":19,"line_end":19,"column_start":43,"column_end":47,"is_primary":true,"text":[{"text":"    users::table.find(user_id).get_result(conn)","highlight_start":43,"highlight_end":47}],"label":"the trait `FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not implemented for `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime)`, which is required by `SelectStatement<FromClause<table>, query_builder::select_clause::DefaultSelectClause<FromClause<table>>, query_builder::distinct_clause::NoDistinctClause, query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>>: LoadQuery<'_, _, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":583,"byte_end":593,"line_start":19,"line_end":19,"column_start":32,"column_end":42,"is_primary":false,"text":[{"text":"    users::table.find(user_id).get_result(conn)","highlight_start":32,"highlight_end":42}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `FromStaticSqlRow<ST, DB>`:\n  <(T0,) as FromStaticSqlRow<(ST0,), __DB>>\n  <(T1, T0) as FromStaticSqlRow<(ST1, ST0), __DB>>\n  <(T1, T2, T0) as FromStaticSqlRow<(ST1, ST2, ST0), __DB>>\n  <(T1, T2, T3, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST0), __DB>>\n  <(T1, T2, T3, T4, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST0), __DB>>\n  <(T1, T2, T3, T4, T5, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST0), __DB>>\n  <(T1, T2, T3, T4, T5, T6, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST0), __DB>>\n  <(T1, T2, T3, T4, T5, T6, T7, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST0), __DB>>\nand 24 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `User` to implement `diesel::Queryable<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`","code":null,"level":"note","spans":[{"file_name":"src/models.rs","byte_start":113,"byte_end":122,"line_start":6,"line_end":6,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":10,"highlight_end":19}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":113,"byte_end":122,"line_start":6,"line_end":6,"column_start":10,"column_end":19,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Queryable)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":23512,"byte_end":23570,"line_start":631,"line_end":631,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"pub fn derive_queryable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/models.rs","byte_start":222,"byte_end":226,"line_start":8,"line_end":8,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"pub struct User {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for `User` to implement `FromSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp)` to implement `load_dsl::private::CompatibleType<User, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>` to implement `LoadQuery<'_, _, User>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `get_result`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":59209,"byte_end":59219,"line_start":1720,"line_end":1720,"column_start":8,"column_end":18,"is_primary":false,"text":[{"text":"    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>","highlight_start":8,"highlight_end":18}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":59296,"byte_end":59322,"line_start":1722,"line_end":1722,"column_start":15,"column_end":41,"is_primary":true,"text":[{"text":"        Self: LoadQuery<'query, Conn, U>,","highlight_start":15,"highlight_end":41}],"label":"required by this bound in `RunQueryDsl::get_result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-8853325741634496730.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime): FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:19:43\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    users::table.find(user_id).get_result(conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not implemented for `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime)`, which is required by `SelectStatement<FromClause<table>, query_builder::select_clause::DefaultSelectClause<FromClause<table>>, query_builder::distinct_clause::NoDistinctClause, query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>>: LoadQuery<'_, _, _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `FromStaticSqlRow<ST, DB>`:\u001b[0m\n\u001b[0m               <(T0,) as FromStaticSqlRow<(ST0,), __DB>>\u001b[0m\n\u001b[0m               <(T1, T0) as FromStaticSqlRow<(ST1, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T0) as FromStaticSqlRow<(ST1, ST2, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T5, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T5, T6, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T5, T6, T7, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST0), __DB>>\u001b[0m\n\u001b[0m             and 24 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `User` to implement `diesel::Queryable<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:10\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[diesel(table_name = users)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct User {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `User` to implement `FromSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp)` to implement `load_dsl::private::CompatibleType<User, _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>` to implement `LoadQuery<'_, _, User>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `get_result`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:1722:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1721\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: LoadQuery<'query, Conn, U>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RunQueryDsl::get_result`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-8853325741634496730.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Queryable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":695,"byte_end":699,"line_start":23,"line_end":23,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"    users::table.load(conn)","highlight_start":23,"highlight_end":27}],"label":"types differ in mutability","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":690,"byte_end":694,"line_start":23,"line_end":23,"column_start":18,"column_end":22,"is_primary":false,"text":[{"text":"    users::table.load(conn)","highlight_start":18,"highlight_end":22}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected mutable reference `&mut _`\n           found reference `&diesel::PgConnection`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":52968,"byte_end":52972,"line_start":1540,"line_end":1540,"column_start":8,"column_end":12,"is_primary":true,"text":[{"text":"    fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>","highlight_start":8,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:23:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    users::table.load(conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mtypes differ in mutability\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected mutable reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mmut _\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                        found reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mdiesel::PgConnection\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:1540:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime): FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":695,"byte_end":699,"line_start":23,"line_end":23,"column_start":23,"column_end":27,"is_primary":true,"text":[{"text":"    users::table.load(conn)","highlight_start":23,"highlight_end":27}],"label":"the trait `FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not implemented for `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime)`, which is required by `table: LoadQuery<'_, _, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":690,"byte_end":694,"line_start":23,"line_end":23,"column_start":18,"column_end":22,"is_primary":false,"text":[{"text":"    users::table.load(conn)","highlight_start":18,"highlight_end":22}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `FromStaticSqlRow<ST, DB>`:\n  <(T0,) as FromStaticSqlRow<(ST0,), __DB>>\n  <(T1, T0) as FromStaticSqlRow<(ST1, ST0), __DB>>\n  <(T1, T2, T0) as FromStaticSqlRow<(ST1, ST2, ST0), __DB>>\n  <(T1, T2, T3, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST0), __DB>>\n  <(T1, T2, T3, T4, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST0), __DB>>\n  <(T1, T2, T3, T4, T5, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST0), __DB>>\n  <(T1, T2, T3, T4, T5, T6, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST0), __DB>>\n  <(T1, T2, T3, T4, T5, T6, T7, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST0), __DB>>\nand 24 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `User` to implement `diesel::Queryable<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`","code":null,"level":"note","spans":[{"file_name":"src/models.rs","byte_start":113,"byte_end":122,"line_start":6,"line_end":6,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":10,"highlight_end":19}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":113,"byte_end":122,"line_start":6,"line_end":6,"column_start":10,"column_end":19,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Queryable)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":23512,"byte_end":23570,"line_start":631,"line_end":631,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"pub fn derive_queryable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/models.rs","byte_start":222,"byte_end":226,"line_start":8,"line_end":8,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"pub struct User {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for `User` to implement `FromSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp)` to implement `load_dsl::private::CompatibleType<User, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `table` to implement `LoadQuery<'_, _, User>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `diesel::RunQueryDsl::load`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":52968,"byte_end":52972,"line_start":1540,"line_end":1540,"column_start":8,"column_end":12,"is_primary":false,"text":[{"text":"    fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>","highlight_start":8,"highlight_end":12}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":53054,"byte_end":53080,"line_start":1542,"line_end":1542,"column_start":15,"column_end":41,"is_primary":true,"text":[{"text":"        Self: LoadQuery<'query, Conn, U>,","highlight_start":15,"highlight_end":41}],"label":"required by this bound in `RunQueryDsl::load`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime): FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:23:23\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    users::table.load(conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not implemented for `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime)`, which is required by `table: LoadQuery<'_, _, _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `FromStaticSqlRow<ST, DB>`:\u001b[0m\n\u001b[0m               <(T0,) as FromStaticSqlRow<(ST0,), __DB>>\u001b[0m\n\u001b[0m               <(T1, T0) as FromStaticSqlRow<(ST1, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T0) as FromStaticSqlRow<(ST1, ST2, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T5, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T5, T6, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T5, T6, T7, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST0), __DB>>\u001b[0m\n\u001b[0m             and 24 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `User` to implement `diesel::Queryable<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:10\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[diesel(table_name = users)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct User {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `User` to implement `FromSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp)` to implement `load_dsl::private::CompatibleType<User, _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `table` to implement `LoadQuery<'_, _, User>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `diesel::RunQueryDsl::load`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:1542:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1540\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1541\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1542\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: LoadQuery<'query, Conn, U>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RunQueryDsl::load`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Queryable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":842,"byte_end":849,"line_start":27,"line_end":27,"column_start":38,"column_end":45,"is_primary":true,"text":[{"text":"    diesel::update(users::table.find(user_id))","highlight_start":38,"highlight_end":45}],"label":"the trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `table: FindDsl<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":837,"byte_end":841,"line_start":27,"line_end":27,"column_start":33,"column_end":37,"is_primary":false,"text":[{"text":"    diesel::update(users::table.find(user_id))","highlight_start":33,"highlight_end":37}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `columns::id` to implement `EqAll<uuid::Uuid>`","code":null,"level":"note","spans":[{"file_name":"src/schema.rs","byte_start":62,"byte_end":64,"line_start":5,"line_end":5,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        id -> Uuid,","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for `table` to implement `FindDsl<uuid::Uuid>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `diesel::QueryDsl::find`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":25546,"byte_end":25550,"line_start":722,"line_end":722,"column_start":8,"column_end":12,"is_primary":false,"text":[{"text":"    fn find<PK>(self, id: PK) -> Find<Self, PK>","highlight_start":8,"highlight_end":12}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":25611,"byte_end":25631,"line_start":724,"line_end":724,"column_start":15,"column_end":35,"is_primary":true,"text":[{"text":"        Self: methods::FindDsl<PK>,","highlight_start":15,"highlight_end":35}],"label":"required by this bound in `QueryDsl::find`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:27:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    diesel::update(users::table.find(user_id))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `table: FindDsl<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m              Box<T>\u001b[0m\n\u001b[0m              columns::updated_at\u001b[0m\n\u001b[0m              columns::created_at\u001b[0m\n\u001b[0m              columns::password_hash\u001b[0m\n\u001b[0m              columns::email\u001b[0m\n\u001b[0m              columns::username\u001b[0m\n\u001b[0m              columns::id\u001b[0m\n\u001b[0m              columns::star\u001b[0m\n\u001b[0m            and 138 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `diesel::Expression`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `columns::id` to implement `EqAll<uuid::Uuid>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/schema.rs:5:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Uuid,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `table` to implement `FindDsl<uuid::Uuid>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `diesel::QueryDsl::find`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:724:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn find<PK>(self, id: PK) -> Find<Self, PK>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m723\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: methods::FindDsl<PK>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryDsl::find`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: ValidGrouping<()>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":842,"byte_end":849,"line_start":27,"line_end":27,"column_start":38,"column_end":45,"is_primary":true,"text":[{"text":"    diesel::update(users::table.find(user_id))","highlight_start":38,"highlight_end":45}],"label":"the trait `ValidGrouping<()>` is not implemented for `uuid::Uuid`, which is required by `table: FindDsl<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":837,"byte_end":841,"line_start":27,"line_end":27,"column_start":33,"column_end":37,"is_primary":false,"text":[{"text":"    diesel::update(users::table.find(user_id))","highlight_start":33,"highlight_end":37}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `ValidGrouping<GroupByClause>`:\n  <Box<T> as ValidGrouping<GB>>\n  <columns::updated_at as ValidGrouping<()>>\n  <columns::updated_at as ValidGrouping<__GB>>\n  <columns::created_at as ValidGrouping<()>>\n  <columns::created_at as ValidGrouping<__GB>>\n  <columns::password_hash as ValidGrouping<()>>\n  <columns::password_hash as ValidGrouping<__GB>>\n  <columns::email as ValidGrouping<()>>\nand 166 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `ValidGrouping<()>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>` to implement `NonAggregate`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `SelectStatement<FromClause<table>>` to implement `FilterDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `table` to implement `FilterDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `table` to implement `FindDsl<uuid::Uuid>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `diesel::QueryDsl::find`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":25546,"byte_end":25550,"line_start":722,"line_end":722,"column_start":8,"column_end":12,"is_primary":false,"text":[{"text":"    fn find<PK>(self, id: PK) -> Find<Self, PK>","highlight_start":8,"highlight_end":12}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":25611,"byte_end":25631,"line_start":724,"line_end":724,"column_start":15,"column_end":35,"is_primary":true,"text":[{"text":"        Self: methods::FindDsl<PK>,","highlight_start":15,"highlight_end":35}],"label":"required by this bound in `QueryDsl::find`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: ValidGrouping<()>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:27:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    diesel::update(users::table.find(user_id))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `ValidGrouping<()>` is not implemented for `uuid::Uuid`, which is required by `table: FindDsl<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `ValidGrouping<GroupByClause>`:\u001b[0m\n\u001b[0m              <Box<T> as ValidGrouping<GB>>\u001b[0m\n\u001b[0m              <columns::updated_at as ValidGrouping<()>>\u001b[0m\n\u001b[0m              <columns::updated_at as ValidGrouping<__GB>>\u001b[0m\n\u001b[0m              <columns::created_at as ValidGrouping<()>>\u001b[0m\n\u001b[0m              <columns::created_at as ValidGrouping<__GB>>\u001b[0m\n\u001b[0m              <columns::password_hash as ValidGrouping<()>>\u001b[0m\n\u001b[0m              <columns::password_hash as ValidGrouping<__GB>>\u001b[0m\n\u001b[0m              <columns::email as ValidGrouping<()>>\u001b[0m\n\u001b[0m            and 166 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `ValidGrouping<()>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>` to implement `NonAggregate`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `SelectStatement<FromClause<table>>` to implement `FilterDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `table` to implement `FilterDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `table` to implement `FindDsl<uuid::Uuid>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `diesel::QueryDsl::find`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:724:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn find<PK>(self, id: PK) -> Find<Self, PK>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m723\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: methods::FindDsl<PK>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryDsl::find`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `SelectStatement<FromClause<table>, query_builder::select_clause::DefaultSelectClause<FromClause<table>>, query_builder::distinct_clause::NoDistinctClause, query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>>: IntoUpdateTarget` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":824,"byte_end":850,"line_start":27,"line_end":27,"column_start":20,"column_end":46,"is_primary":true,"text":[{"text":"    diesel::update(users::table.find(user_id))","highlight_start":20,"highlight_end":46}],"label":"the trait `IntoUpdateTarget` is not implemented for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":809,"byte_end":823,"line_start":27,"line_end":27,"column_start":5,"column_end":19,"is_primary":false,"text":[{"text":"    diesel::update(users::table.find(user_id))","highlight_start":5,"highlight_end":19}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `IntoUpdateTarget` is implemented for `SelectStatement<FromClause<F>, query_builder::select_clause::DefaultSelectClause<FromClause<F>>, query_builder::distinct_clause::NoDistinctClause, W>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `update`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_builder/functions.rs","byte_start":2822,"byte_end":2838,"line_start":80,"line_end":80,"column_start":18,"column_end":34,"is_primary":true,"text":[{"text":"pub fn update<T: IntoUpdateTarget>(source: T) -> UpdateStatement<T::Table, T::WhereClause> {","highlight_start":18,"highlight_end":34}],"label":"required by this bound in `update`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider removing this method call, as the receiver has type `table` and `table: IntoUpdateTarget` trivially holds","code":null,"level":"help","spans":[{"file_name":"src/actions.rs","byte_start":836,"byte_end":850,"line_start":27,"line_end":27,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    diesel::update(users::table.find(user_id))","highlight_start":32,"highlight_end":46}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `SelectStatement<FromClause<table>, query_builder::select_clause::DefaultSelectClause<FromClause<table>>, query_builder::distinct_clause::NoDistinctClause, query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>>: IntoUpdateTarget` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:27:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    diesel::update(users::table.find(user_id))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `IntoUpdateTarget` is not implemented for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `IntoUpdateTarget` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m\u001b[35mSelectStatement<FromClause<F>, query_builder::select_clause::DefaultSelectClause<FromClause<F>>, query_builder::distinct_clause::NoDistinctClause, W>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `update`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_builder/functions.rs:80:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn update<T: IntoUpdateTarget>(source: T) -> UpdateStatement<T::Table, T::WhereClause> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `update`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider removing this method call, as the receiver has type `table` and `table: IntoUpdateTarget` trivially holds\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    diesel::update(users::table\u001b[0m\u001b[0m\u001b[38;5;9m.find(user_id)\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    diesel::update(users::table)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":913,"byte_end":917,"line_start":29,"line_end":29,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        .get_result(conn)","highlight_start":21,"highlight_end":25}],"label":"types differ in mutability","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":902,"byte_end":912,"line_start":29,"line_end":29,"column_start":10,"column_end":20,"is_primary":false,"text":[{"text":"        .get_result(conn)","highlight_start":10,"highlight_end":20}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected mutable reference `&mut _`\n           found reference `&diesel::PgConnection`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":59209,"byte_end":59219,"line_start":1720,"line_end":1720,"column_start":8,"column_end":18,"is_primary":true,"text":[{"text":"    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>","highlight_start":8,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:29:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .get_result(conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mtypes differ in mutability\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected mutable reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mmut _\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                        found reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mdiesel::PgConnection\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:1720:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime): FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":913,"byte_end":917,"line_start":29,"line_end":29,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        .get_result(conn)","highlight_start":21,"highlight_end":25}],"label":"the trait `FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not implemented for `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime)`, which is required by `UpdateStatement<table, _, query_builder::update_statement::changeset::Assign<query_builder::update_statement::changeset::ColumnWrapperForUpdate<columns::email>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>>: LoadQuery<'_, _, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":902,"byte_end":912,"line_start":29,"line_end":29,"column_start":10,"column_end":20,"is_primary":false,"text":[{"text":"        .get_result(conn)","highlight_start":10,"highlight_end":20}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `FromStaticSqlRow<ST, DB>`:\n  <(T0,) as FromStaticSqlRow<(ST0,), __DB>>\n  <(T1, T0) as FromStaticSqlRow<(ST1, ST0), __DB>>\n  <(T1, T2, T0) as FromStaticSqlRow<(ST1, ST2, ST0), __DB>>\n  <(T1, T2, T3, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST0), __DB>>\n  <(T1, T2, T3, T4, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST0), __DB>>\n  <(T1, T2, T3, T4, T5, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST0), __DB>>\n  <(T1, T2, T3, T4, T5, T6, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST0), __DB>>\n  <(T1, T2, T3, T4, T5, T6, T7, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST0), __DB>>\nand 24 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `User` to implement `diesel::Queryable<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`","code":null,"level":"note","spans":[{"file_name":"src/models.rs","byte_start":113,"byte_end":122,"line_start":6,"line_end":6,"column_start":10,"column_end":19,"is_primary":true,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":10,"highlight_end":19}],"label":"unsatisfied trait bound introduced in this `derive` macro","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/models.rs","byte_start":113,"byte_end":122,"line_start":6,"line_end":6,"column_start":10,"column_end":19,"is_primary":false,"text":[{"text":"#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]","highlight_start":10,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Queryable)]","def_site_span":{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel_derives-2.2.1/src/lib.rs","byte_start":23512,"byte_end":23570,"line_start":631,"line_end":631,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"pub fn derive_queryable(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/models.rs","byte_start":222,"byte_end":226,"line_start":8,"line_end":8,"column_start":12,"column_end":16,"is_primary":true,"text":[{"text":"pub struct User {","highlight_start":12,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for `User` to implement `FromSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp)` to implement `load_dsl::private::CompatibleType<User, _>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `UpdateStatement<table, _, Assign<ColumnWrapperForUpdate<email>, Bound<Text, &str>>>` to implement `LoadQuery<'_, _, User>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `get_result`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":59209,"byte_end":59219,"line_start":1720,"line_end":1720,"column_start":8,"column_end":18,"is_primary":false,"text":[{"text":"    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>","highlight_start":8,"highlight_end":18}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":59296,"byte_end":59322,"line_start":1722,"line_end":1722,"column_start":15,"column_end":41,"is_primary":true,"text":[{"text":"        Self: LoadQuery<'query, Conn, U>,","highlight_start":15,"highlight_end":41}],"label":"required by this bound in `RunQueryDsl::get_result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-3033202568415874329.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime): FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:29:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .get_result(conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `FromStaticSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>` is not implemented for `(uuid::Uuid, std::string::String, std::string::String, std::string::String, NaiveDateTime, NaiveDateTime)`, which is required by `UpdateStatement<table, _, query_builder::update_statement::changeset::Assign<query_builder::update_statement::changeset::ColumnWrapperForUpdate<columns::email>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>>: LoadQuery<'_, _, _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `FromStaticSqlRow<ST, DB>`:\u001b[0m\n\u001b[0m               <(T0,) as FromStaticSqlRow<(ST0,), __DB>>\u001b[0m\n\u001b[0m               <(T1, T0) as FromStaticSqlRow<(ST1, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T0) as FromStaticSqlRow<(ST1, ST2, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T5, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T5, T6, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST0), __DB>>\u001b[0m\n\u001b[0m               <(T1, T2, T3, T4, T5, T6, T7, T0) as FromStaticSqlRow<(ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST0), __DB>>\u001b[0m\n\u001b[0m             and 24 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `User` to implement `diesel::Queryable<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/models.rs:6:10\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Queryable, Insertable, AsChangeset, Serialize, Deserialize, Debug)]\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10munsatisfied trait bound introduced in this `derive` macro\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[diesel(table_name = users)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct User {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `User` to implement `FromSqlRow<(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp), _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `(diesel::sql_types::Uuid, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Text, diesel::sql_types::Timestamp, diesel::sql_types::Timestamp)` to implement `load_dsl::private::CompatibleType<User, _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `UpdateStatement<table, _, Assign<ColumnWrapperForUpdate<email>, Bound<Text, &str>>>` to implement `LoadQuery<'_, _, User>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `get_result`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:1722:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1721\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: LoadQuery<'query, Conn, U>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RunQueryDsl::get_result`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full name for the type has been written to '/Users/malohenry/development/NFS/Ecoblocks/ecoblock-api/target/debug/deps/ecoblock_api-7d1907a995500830.long-type-3033202568415874329.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Queryable` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `SelectStatement<FromClause<table>, query_builder::select_clause::DefaultSelectClause<FromClause<table>>, query_builder::distinct_clause::NoDistinctClause, query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>>: IntoUpdateTarget` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":809,"byte_end":851,"line_start":27,"line_end":27,"column_start":5,"column_end":47,"is_primary":true,"text":[{"text":"    diesel::update(users::table.find(user_id))","highlight_start":5,"highlight_end":47}],"label":"the trait `IntoUpdateTarget` is not implemented for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `IntoUpdateTarget` is implemented for `SelectStatement<FromClause<F>, query_builder::select_clause::DefaultSelectClause<FromClause<F>>, query_builder::distinct_clause::NoDistinctClause, W>`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `SelectStatement<FromClause<table>, query_builder::select_clause::DefaultSelectClause<FromClause<table>>, query_builder::distinct_clause::NoDistinctClause, query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>>: IntoUpdateTarget` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:27:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    diesel::update(users::table.find(user_id))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `IntoUpdateTarget` is not implemented for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `IntoUpdateTarget` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m\u001b[35mSelectStatement<FromClause<F>, query_builder::select_clause::DefaultSelectClause<FromClause<F>>, query_builder::distinct_clause::NoDistinctClause, W>\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: diesel::Expression` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":1038,"byte_end":1045,"line_start":33,"line_end":33,"column_start":38,"column_end":45,"is_primary":true,"text":[{"text":"    diesel::delete(users::table.find(user_id)).execute(conn)","highlight_start":38,"highlight_end":45}],"label":"the trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `table: FindDsl<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":1033,"byte_end":1037,"line_start":33,"line_end":33,"column_start":33,"column_end":37,"is_primary":false,"text":[{"text":"    diesel::delete(users::table.find(user_id)).execute(conn)","highlight_start":33,"highlight_end":37}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Expression`:\n  Box<T>\n  columns::updated_at\n  columns::created_at\n  columns::password_hash\n  columns::email\n  columns::username\n  columns::id\n  columns::star\nand 138 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `diesel::Expression`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `columns::id` to implement `EqAll<uuid::Uuid>`","code":null,"level":"note","spans":[{"file_name":"src/schema.rs","byte_start":62,"byte_end":64,"line_start":5,"line_end":5,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        id -> Uuid,","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for `table` to implement `FindDsl<uuid::Uuid>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `diesel::QueryDsl::find`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":25546,"byte_end":25550,"line_start":722,"line_end":722,"column_start":8,"column_end":12,"is_primary":false,"text":[{"text":"    fn find<PK>(self, id: PK) -> Find<Self, PK>","highlight_start":8,"highlight_end":12}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":25611,"byte_end":25631,"line_start":724,"line_end":724,"column_start":15,"column_end":35,"is_primary":true,"text":[{"text":"        Self: methods::FindDsl<PK>,","highlight_start":15,"highlight_end":35}],"label":"required by this bound in `QueryDsl::find`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: diesel::Expression` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:33:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    diesel::delete(users::table.find(user_id)).execute(conn)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Expression` is not implemented for `uuid::Uuid`, which is required by `table: FindDsl<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Expression`:\u001b[0m\n\u001b[0m              Box<T>\u001b[0m\n\u001b[0m              columns::updated_at\u001b[0m\n\u001b[0m              columns::created_at\u001b[0m\n\u001b[0m              columns::password_hash\u001b[0m\n\u001b[0m              columns::email\u001b[0m\n\u001b[0m              columns::username\u001b[0m\n\u001b[0m              columns::id\u001b[0m\n\u001b[0m              columns::star\u001b[0m\n\u001b[0m            and 138 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `diesel::Expression`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `columns::id` to implement `EqAll<uuid::Uuid>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/schema.rs:5:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        id -> Uuid,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `table` to implement `FindDsl<uuid::Uuid>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `diesel::QueryDsl::find`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:724:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn find<PK>(self, id: PK) -> Find<Self, PK>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m723\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: methods::FindDsl<PK>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryDsl::find`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `uuid::Uuid: ValidGrouping<()>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":1038,"byte_end":1045,"line_start":33,"line_end":33,"column_start":38,"column_end":45,"is_primary":true,"text":[{"text":"    diesel::delete(users::table.find(user_id)).execute(conn)","highlight_start":38,"highlight_end":45}],"label":"the trait `ValidGrouping<()>` is not implemented for `uuid::Uuid`, which is required by `table: FindDsl<_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":1033,"byte_end":1037,"line_start":33,"line_end":33,"column_start":33,"column_end":37,"is_primary":false,"text":[{"text":"    diesel::delete(users::table.find(user_id)).execute(conn)","highlight_start":33,"highlight_end":37}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `ValidGrouping<GroupByClause>`:\n  <Box<T> as ValidGrouping<GB>>\n  <columns::updated_at as ValidGrouping<()>>\n  <columns::updated_at as ValidGrouping<__GB>>\n  <columns::created_at as ValidGrouping<()>>\n  <columns::created_at as ValidGrouping<__GB>>\n  <columns::password_hash as ValidGrouping<()>>\n  <columns::password_hash as ValidGrouping<__GB>>\n  <columns::email as ValidGrouping<()>>\nand 166 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `ValidGrouping<()>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>` to implement `NonAggregate`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `SelectStatement<FromClause<table>>` to implement `FilterDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `table` to implement `FilterDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `table` to implement `FindDsl<uuid::Uuid>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `diesel::QueryDsl::find`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":25546,"byte_end":25550,"line_start":722,"line_end":722,"column_start":8,"column_end":12,"is_primary":false,"text":[{"text":"    fn find<PK>(self, id: PK) -> Find<Self, PK>","highlight_start":8,"highlight_end":12}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":25611,"byte_end":25631,"line_start":724,"line_end":724,"column_start":15,"column_end":35,"is_primary":true,"text":[{"text":"        Self: methods::FindDsl<PK>,","highlight_start":15,"highlight_end":35}],"label":"required by this bound in `QueryDsl::find`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `uuid::Uuid: ValidGrouping<()>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:33:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    diesel::delete(users::table.find(user_id)).execute(conn)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `ValidGrouping<()>` is not implemented for `uuid::Uuid`, which is required by `table: FindDsl<_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `ValidGrouping<GroupByClause>`:\u001b[0m\n\u001b[0m              <Box<T> as ValidGrouping<GB>>\u001b[0m\n\u001b[0m              <columns::updated_at as ValidGrouping<()>>\u001b[0m\n\u001b[0m              <columns::updated_at as ValidGrouping<__GB>>\u001b[0m\n\u001b[0m              <columns::created_at as ValidGrouping<()>>\u001b[0m\n\u001b[0m              <columns::created_at as ValidGrouping<__GB>>\u001b[0m\n\u001b[0m              <columns::password_hash as ValidGrouping<()>>\u001b[0m\n\u001b[0m              <columns::password_hash as ValidGrouping<__GB>>\u001b[0m\n\u001b[0m              <columns::email as ValidGrouping<()>>\u001b[0m\n\u001b[0m            and 166 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::operators::Eq<columns::id, uuid::Uuid>` to implement `ValidGrouping<()>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>` to implement `NonAggregate`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `SelectStatement<FromClause<table>>` to implement `FilterDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `table` to implement `FilterDsl<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `table` to implement `FindDsl<uuid::Uuid>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `diesel::QueryDsl::find`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:724:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn find<PK>(self, id: PK) -> Find<Self, PK>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m723\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: methods::FindDsl<PK>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `QueryDsl::find`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `SelectStatement<FromClause<table>, query_builder::select_clause::DefaultSelectClause<FromClause<table>>, query_builder::distinct_clause::NoDistinctClause, query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>>: IntoUpdateTarget` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":1020,"byte_end":1046,"line_start":33,"line_end":33,"column_start":20,"column_end":46,"is_primary":true,"text":[{"text":"    diesel::delete(users::table.find(user_id)).execute(conn)","highlight_start":20,"highlight_end":46}],"label":"the trait `IntoUpdateTarget` is not implemented for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":1005,"byte_end":1019,"line_start":33,"line_end":33,"column_start":5,"column_end":19,"is_primary":false,"text":[{"text":"    diesel::delete(users::table.find(user_id)).execute(conn)","highlight_start":5,"highlight_end":19}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `IntoUpdateTarget` is implemented for `SelectStatement<FromClause<F>, query_builder::select_clause::DefaultSelectClause<FromClause<F>>, query_builder::distinct_clause::NoDistinctClause, W>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `diesel::delete`","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_builder/functions.rs","byte_start":4222,"byte_end":4238,"line_start":132,"line_end":132,"column_start":18,"column_end":34,"is_primary":true,"text":[{"text":"pub fn delete<T: IntoUpdateTarget>(source: T) -> DeleteStatement<T::Table, T::WhereClause> {","highlight_start":18,"highlight_end":34}],"label":"required by this bound in `delete`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider removing this method call, as the receiver has type `table` and `table: IntoUpdateTarget` trivially holds","code":null,"level":"help","spans":[{"file_name":"src/actions.rs","byte_start":1032,"byte_end":1046,"line_start":33,"line_end":33,"column_start":32,"column_end":46,"is_primary":true,"text":[{"text":"    diesel::delete(users::table.find(user_id)).execute(conn)","highlight_start":32,"highlight_end":46}],"label":null,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `SelectStatement<FromClause<table>, query_builder::select_clause::DefaultSelectClause<FromClause<table>>, query_builder::distinct_clause::NoDistinctClause, query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>>: IntoUpdateTarget` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:33:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    diesel::delete(users::table.find(user_id)).execute(conn)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `IntoUpdateTarget` is not implemented for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `IntoUpdateTarget` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m\u001b[35mSelectStatement<FromClause<F>, query_builder::select_clause::DefaultSelectClause<FromClause<F>>, query_builder::distinct_clause::NoDistinctClause, W>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `diesel::delete`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_builder/functions.rs:132:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn delete<T: IntoUpdateTarget>(source: T) -> DeleteStatement<T::Table, T::WhereClause> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `delete`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider removing this method call, as the receiver has type `table` and `table: IntoUpdateTarget` trivially holds\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    diesel::delete(users::table\u001b[0m\u001b[0m\u001b[38;5;9m.find(user_id)\u001b[0m\u001b[0m).execute(conn)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    diesel::delete(users::table).execute(conn)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":1056,"byte_end":1060,"line_start":33,"line_end":33,"column_start":56,"column_end":60,"is_primary":true,"text":[{"text":"    diesel::delete(users::table.find(user_id)).execute(conn)","highlight_start":56,"highlight_end":60}],"label":"types differ in mutability","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/actions.rs","byte_start":1048,"byte_end":1055,"line_start":33,"line_end":33,"column_start":48,"column_end":55,"is_primary":false,"text":[{"text":"    diesel::delete(users::table.find(user_id)).execute(conn)","highlight_start":48,"highlight_end":55}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected mutable reference `&mut _`\n           found reference `&diesel::PgConnection`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs","byte_start":49139,"byte_end":49146,"line_start":1428,"line_end":1428,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn execute(self, conn: &mut Conn) -> QueryResult<usize>","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:33:56\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    diesel::delete(users::table.find(user_id)).execute(conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mtypes differ in mutability\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this method are incorrect\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected mutable reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mmut _\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m                        found reference `&\u001b[0m\u001b[0m\u001b[1m\u001b[35mdiesel::PgConnection\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/malohenry/.cargo/registry/src/index.crates.io-6f17d22bba15001f/diesel-2.2.1/src/query_dsl/mod.rs:1428:8\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1428\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn execute(self, conn: &mut Conn) -> QueryResult<usize>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `SelectStatement<FromClause<table>, query_builder::select_clause::DefaultSelectClause<FromClause<table>>, query_builder::distinct_clause::NoDistinctClause, query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>>: IntoUpdateTarget` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/actions.rs","byte_start":1005,"byte_end":1047,"line_start":33,"line_end":33,"column_start":5,"column_end":47,"is_primary":true,"text":[{"text":"    diesel::delete(users::table.find(user_id)).execute(conn)","highlight_start":5,"highlight_end":47}],"label":"the trait `IntoUpdateTarget` is not implemented for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `IntoUpdateTarget` is implemented for `SelectStatement<FromClause<F>, query_builder::select_clause::DefaultSelectClause<FromClause<F>>, query_builder::distinct_clause::NoDistinctClause, W>`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `SelectStatement<FromClause<table>, query_builder::select_clause::DefaultSelectClause<FromClause<table>>, query_builder::distinct_clause::NoDistinctClause, query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<columns::id, uuid::Uuid>>>>: IntoUpdateTarget` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/actions.rs:33:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    diesel::delete(users::table.find(user_id)).execute(conn)\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `IntoUpdateTarget` is not implemented for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<Grouped<Eq<id, Uuid>>>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `IntoUpdateTarget` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m\u001b[35mSelectStatement<FromClause<F>, query_builder::select_clause::DefaultSelectClause<FromClause<F>>, query_builder::distinct_clause::NoDistinctClause, W>\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 51 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 51 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0308, E0433, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308, E0433, E0599.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
